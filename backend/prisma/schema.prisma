// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  password       String
  cpf            String
  cnpj           String?
  cep            String
  numberAddress  Int
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  sale_as_buyer  Sale[]       @relation("buyer")
  sale_as_seller Sale[]       @relation("seller")
  UserAccess     UserAccess[]
  store          Store[]
}

model UserAccess {
  id         String   @id @default(uuid())
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
  Access     Access?  @relation(fields: [accessId], references: [id])
  accessId   String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Access {
  id         String       @id @default(uuid())
  name       String       @unique
  UserAccess UserAccess[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Product {
  id                String        @id @default(uuid())
  storeId           String?
  name              String
  images            String[]      @default([])
  description       String        @default("")
  price             Int
  amount            Int
  categories        String[]      @default([])
  Store             Store?        @relation(fields: [storeId], references: [id])
  SaleProduct       SaleProduct[]
  quantityAvailable Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  discount          Float?        @default(0)
  attributes        Json?
  shippingInfo      Json?
  status            String?       @default("active")
  sku               String?       @default("")
  brand             String?       @default("")
  vendorId          String?       @default("")
  averageRating     Float?        @default(0)
  tags              String[]      @default([])
}

model Store {
  id           String    @id @default(uuid())
  name         String
  description  String?
  images       String[]
  categories   String[]
  contactInfo  Json?
  openingHours String[]
  returnPolicy String?
  followers    Int       @default(0)
  Product      Product[]
  User         User?     @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Sale {
  id              String        @id @default(uuid())
  totalValue      Float
  Buyer           User?         @relation("buyer", fields: [buyerId], references: [id])
  buyerId         String?
  Seller          User?         @relation("seller", fields: [sellerId], references: [id])
  sellerId        String?
  buyerConfirmed  Boolean       @default(false)
  sellerConfirmed Boolean       @default(false)
  SaleProduct     SaleProduct[]
  status          String        @default("pending")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model SaleProduct {
  id        String   @id @default(uuid())
  quantify  Int
  Sale      Sale     @relation(fields: [saleId], references: [id])
  saleId    String
  Product   Product  @relation(fields: [productId], references: [id])
  productId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
